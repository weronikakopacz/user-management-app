{"version":3,"sources":["slices/filterSlice.tsx","services/UserService.tsx","slices/userSlice.tsx","components/Table.tsx","store/hooks.tsx","pages/Home.tsx","App.tsx","store/store.tsx","index.tsx"],"names":["filterSlice","createSlice","name","initialState","username","email","phone","reducers","setFilter","state","action","payload","filter","value","actions","fetchUsers","createAsyncThunk","async","response","fetch","json","error","console","getAllUsers","userSlice","users","loading","extraReducers","builder","addCase","pending","fulfilled","rejected","selectFilteredUsers","filters","user","toLowerCase","includes","Table","dispatch","useDispatch","filteredUsers","useSelector","headers","React","createElement","className","map","header","key","type","placeholder","onChange","e","handleFilterChange","filterName","target","length","id","colSpan","useAppDispatch","withTypes","useAppSelector","Home","useEffect","App","store","configureStore","reducer","userReducer","filterReducer","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.a8175d13.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { IFilterState } from '../models/IFilterState';\r\n\r\nconst initialState: IFilterState = {\r\n  name: '',\r\n  username: '',\r\n  email: '',\r\n  phone: '',\r\n};\r\n\r\nconst filterSlice = createSlice({\r\n  name: 'filters',\r\n  initialState,\r\n  reducers: {\r\n    setFilter(state, action: PayloadAction<{ filter: keyof IFilterState; value: string }>) {\r\n      state[action.payload.filter] = action.payload.value;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setFilter } = filterSlice.actions;\r\nexport default filterSlice.reducer;","import { User } from \"../models/IUser\";\r\n\r\nexport const getAllUsers = async ():Promise<User[]> => {\r\n    try {\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n        const data: User[] = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n        throw error;\r\n    }\r\n}","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { User } from '../models/IUser';\r\nimport { getAllUsers } from '../services/UserService';\r\nimport { RootState } from '../store/store';\r\n\r\nexport interface UserState {\r\n  users: User[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: UserState = {\r\n  users: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\r\n  const response = await getAllUsers();\r\n  return response;\r\n});\r\n\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchUsers.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchUsers.fulfilled, (state, action) => {\r\n        state.users = action.payload;\r\n        state.loading = false;\r\n      })\r\n      .addCase(fetchUsers.rejected, (state) => {\r\n        state.loading = false;\r\n        state.error = 'Failed to fetch users';\r\n      });\r\n  },\r\n});\r\n\r\nexport const selectFilteredUsers = (state: RootState) => {\r\n  const users = state.users.users;\r\n  const filters = state.filters;\r\n\r\n  return users.filter(user => \r\n    user.name.toLowerCase().includes(filters.name.toLowerCase()) &&\r\n    user.username.toLowerCase().includes(filters.username.toLowerCase()) &&\r\n    user.email.toLowerCase().includes(filters.email.toLowerCase()) &&\r\n    user.phone.toLowerCase().includes(filters.phone.toLowerCase())\r\n  );\r\n};\r\n\r\nexport default userSlice.reducer;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setFilter } from '../slices/filterSlice';\r\nimport { selectFilteredUsers } from '../slices/userSlice';\r\nimport '../styles/Table.css';\r\nimport { AppDispatch, RootState } from '../store/store';\r\n\r\nconst Table: React.FC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const filteredUsers = useSelector(selectFilteredUsers);\r\n  const filters = useSelector((state: RootState) => state.filters);\r\n\r\n  const handleFilterChange = (filterName: keyof typeof filters, value: string) => {\r\n    dispatch(setFilter({ filter: filterName, value }));\r\n  };\r\n\r\n  const headers = ['Name', 'Username', 'Email', 'Phone'];\r\n  const filterKeys: Array<keyof typeof filters> = ['name', 'username', 'email', 'phone'];\r\n  \r\n  return (\r\n    <div className=\"table-container\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {headers.map(header => (\r\n              <th key={header}>{header}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            {filterKeys.map(key => (\r\n              <th key={key}>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder={`Search by ${key}...`}\r\n                  value={filters[key]}\r\n                  onChange={(e) => handleFilterChange(key, e.target.value)}\r\n                />\r\n              </th>\r\n            ))}\r\n          </tr>\r\n          {filteredUsers.length > 0 ? (\r\n            filteredUsers.map(user => (\r\n              <tr key={user.id}>\r\n                <td>{user.name}</td>\r\n                <td>{user.username}</td>\r\n                <td>{user.email}</td>\r\n                <td>{user.phone}</td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan={headers.length}>No users found</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;","import { useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\r\nexport const useAppSelector = useSelector.withTypes<RootState>()","import React, { useEffect } from 'react';\r\nimport Table from '../components/Table';\r\nimport '../styles/Home.css';\r\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\r\nimport { fetchUsers } from '../slices/userSlice';\r\n\r\nconst Home: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const loading = useAppSelector((state) => state.users.loading);\r\n  const error = useAppSelector((state) => state.users.error);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchUsers());\r\n  }, [dispatch]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Users Table</h1>\r\n      <Table />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React from 'react';\nimport Home from './pages/Home';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Home /> \n    </div>\n  );\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../slices/userSlice';\r\nimport filterReducer from '../slices/filterSlice';\r\nimport { UserState } from '../slices/userSlice';\r\nimport { IFilterState } from '../models/IFilterState';\r\n\r\nexport type RootState = {\r\n  users: UserState;\r\n  filters: IFilterState;\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    users: userReducer,\r\n    filters: filterReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}